{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React from 'react';\nimport { Route, Routes } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Function to start listening to speech\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({\n        continuous: true\n      }); // Start continuous listening\n    }\n  };\n\n  // Function to stop listening to speech and call the API\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when the button is clicked\n\n      if (!transcript.trim()) {\n        alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n        return;\n      } else if (transcript.trim()) {\n        await fetchApiResponse(); // Call the API after stopping\n      }\n      resetTranscript(); // Reset the transcript after API call\n    }\n  };\n\n  // Function to make the API call\n  const fetchApiResponse = async () => {\n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything',\n      // API endpoint\n      {\n        input: transcript // Send the transcribed message as input\n      }, {\n        headers: {\n          'Content-Type': 'application/json' // Set headers\n        }\n      });\n\n      // Extract the response message from the API\n      const aiMessage = response.data.message;\n\n      // Update messages state with the new Q&A\n      setMessages(prevMessages => [...prevMessages, {\n        question: transcript,\n        // Save the transcript as the question\n        answer: aiMessage // Save the AI response as the answer\n      }]);\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages(prevMessages => [...prevMessages, {\n        question: transcript,\n        // Save the transcript even on error\n        answer: 'Error fetching response. Please try again.' // Display error message\n      }]);\n    }\n    setLoading(false); // End loading\n  };\n\n  // Function to reset the response text area\n  const handleResetResponses = () => {\n    setMessages([]); // Clear all Q&A pairs\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Contain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat AI : Your Personal Voice Assistance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"butn\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startbutn\",\n        onClick: handleStartListening,\n        disabled: listening // Disable if already listening\n        ,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopbutn\",\n        onClick: handleStopListening,\n        disabled: !listening // Disable if not listening\n        ,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutn\",\n        onClick: handleResetResponses,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        children: \"Reset Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtrequest\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"Your transcribed text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtresponse\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages.map((msg, index) => `Question ${index + 1}:${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join(''),\n        rows: \"10\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI responses will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"udy9EN2ukZmp7qst/2UsSUcOpbk=\", true);\n_c = App;\nexport default App;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n// function App() {\n//   const [messages, setMessages] = useState(''); // State to store the API response\n//   const [loading, setLoading] = useState(false); // Loading state for API call\n//   const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n//     return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n//   }\n\n//   // Handle microphone click event\n//   const handleMicClick = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n//       handleSendMessage(transcript); // Send the message to OpenAI API\n//       resetTranscript(); // Reset transcript after sending\n//     } else {\n//       SpeechRecognition.startListening(); // Start listening when button is clicked\n//     }\n//   };\n\n//   // Function to send the transcribed message to the API\n//   const handleSendMessage = async (message) => {\n//     if (!message.trim()) {\n//       alert(\"Please say something before sending.\"); // Alert if the message is empty\n//       return;\n//     }\n\n//     setLoading(true); // Start loading\n\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n//         {\n//           input: message, // Send the transcribed message as input\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json', // Set headers\n//           },\n//         }\n//       );\n\n//       // Extract the response message from the API\n//       const aiMessage = response.data.message;\n//       setMessages(aiMessage); // Update messages state with API response\n//     } catch (error) {\n//       console.error('Error fetching response from API:', error); // Handle error\n//       setMessages('Error fetching response. Please try again.'); // Display error message\n//     }\n\n//     setLoading(false); // End loading\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n//       <h1>Chat with AI using Voice</h1>\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={handleMicClick} style={{ padding: '10px', fontSize: '16px' }}>\n//           {listening ? 'Stop Listening' : 'Start Listening'}\n//         </button>\n//         {listening && <p>Listening... Please speak now.</p>}\n//       </div>\n//       {loading && <p>Loading response...</p>}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={transcript}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"Your transcribed text will appear here...\"\n//           style={{ width: '100%', marginBottom: '20px' }}\n//         />\n//         <textarea\n//           value={messages}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"AI response will appear here...\"\n//           style={{ width: '100%' }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Route","Routes","jsxDEV","_jsxDEV","App","_s","messages","setMessages","useState","loading","setLoading","transcript","listening","resetTranscript","useSpeechRecognition","SpeechRecognition","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListening","startListening","continuous","handleStopListening","stopListening","trim","alert","fetchApiResponse","response","axios","post","input","headers","aiMessage","data","message","prevMessages","question","answer","error","console","handleResetResponses","className","style","marginBottom","onClick","disabled","padding","fontSize","value","rows","cols","readOnly","placeholder","map","msg","index","join","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport {Route, Routes,} from \"react-router-dom\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n  }\n\n  // Function to start listening to speech\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({ continuous: true }); // Start continuous listening\n    }\n  };\n\n  // Function to stop listening to speech and call the API\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when the button is clicked\n\n      \n      if (!transcript.trim()) {\n        alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n        return;\n      }\n      else if (transcript.trim()) {\n        await fetchApiResponse(); // Call the API after stopping\n      }\n\n      resetTranscript(); // Reset the transcript after API call\n    }\n  };\n\n  // Function to make the API call\n  const fetchApiResponse = async () => {\n\n    \n    \n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post(\n        'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n        {\n          input: transcript, // Send the transcribed message as input\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json', // Set headers\n          },\n        }\n      );\n\n      // Extract the response message from the API\n      const aiMessage = response.data.message;\n\n      // Update messages state with the new Q&A\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          question: transcript, // Save the transcript as the question\n          answer: aiMessage,    // Save the AI response as the answer\n        },\n      ]);\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          question: transcript, // Save the transcript even on error\n          answer: 'Error fetching response. Please try again.', // Display error message\n        },\n      ]);\n    }\n\n    setLoading(false); // End loading\n  };\n\n  // Function to reset the response text area\n  const handleResetResponses = () => {\n    setMessages([]); // Clear all Q&A pairs\n  };\n\n  return (\n    <div className='Contain'>\n      <h1>Chat AI : Your Personal Voice Assistance</h1>\n      <div className='butn' style={{ marginBottom: '20px' }}>\n        <button className='startbutn'\n          onClick={handleStartListening}\n          disabled={listening} // Disable if already listening\n        >\n          Start Listening\n        </button>\n        <button className='stopbutn'\n          onClick={handleStopListening}\n          disabled={!listening} // Disable if not listening\n        >\n          Stop Listening\n        </button>\n        <button className='resetbutn'\n          onClick={handleResetResponses}\n          style={{ padding: '10px', fontSize: '16px' }}\n        >\n          Reset Responses\n        </button>\n        {listening && <p>Listening... Please speak now.</p>}\n      </div>\n      <div className='txtrequest' >\n        <textarea\n          value={transcript}\n          rows=\"4\"\n          cols=\"50\"\n          readOnly\n          placeholder=\"Your transcribed text will appear here...\"\n          \n        />\n      </div>\n      {loading ? <p>Loading response...</p> : (\n        <div className='txtresponse' >\n          <textarea\n            value={messages.map((msg, index) => `Question ${index + 1}:${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join('')}\n            rows=\"10\"\n            cols=\"50\"\n            readOnly\n            placeholder=\"AI responses will appear here...\"\n            \n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n// function App() {\n//   const [messages, setMessages] = useState(''); // State to store the API response\n//   const [loading, setLoading] = useState(false); // Loading state for API call\n//   const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n//     return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n//   }\n\n//   // Handle microphone click event\n//   const handleMicClick = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n//       handleSendMessage(transcript); // Send the message to OpenAI API\n//       resetTranscript(); // Reset transcript after sending\n//     } else {\n//       SpeechRecognition.startListening(); // Start listening when button is clicked\n//     }\n//   };\n\n//   // Function to send the transcribed message to the API\n//   const handleSendMessage = async (message) => {\n//     if (!message.trim()) {\n//       alert(\"Please say something before sending.\"); // Alert if the message is empty\n//       return;\n//     }\n\n//     setLoading(true); // Start loading\n\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n//         {\n//           input: message, // Send the transcribed message as input\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json', // Set headers\n//           },\n//         }\n//       );\n\n//       // Extract the response message from the API\n//       const aiMessage = response.data.message;\n//       setMessages(aiMessage); // Update messages state with API response\n//     } catch (error) {\n//       console.error('Error fetching response from API:', error); // Handle error\n//       setMessages('Error fetching response. Please try again.'); // Display error message\n//     }\n\n//     setLoading(false); // End loading\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n//       <h1>Chat with AI using Voice</h1>\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={handleMicClick} style={{ padding: '10px', fontSize: '16px' }}>\n//           {listening ? 'Stop Listening' : 'Start Listening'}\n//         </button>\n//         {listening && <p>Listening... Please speak now.</p>}\n//       </div>\n//       {loading && <p>Loading response...</p>}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={transcript}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"Your transcribed text will appear here...\"\n//           style={{ width: '100%', marginBottom: '20px' }}\n//         />\n//         <textarea\n//           value={messages}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"AI response will appear here...\"\n//           style={{ width: '100%' }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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AA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CApIQD,GAAG;AAAAwD,EAAA,GAAHxD,GAAG;AAsIZ,eAAeA,GAAG;;AA0BlB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}