{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\Component\\\\Aibody.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport './Aibody.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Aibody = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const [inputText, setInputText] = useState(\"\"); // State to handle text input\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Function to start listening to speech\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({\n        continuous: true\n      }); // Start continuous listening\n    }\n  };\n\n  // Function to stop listening to speech and use the transcript for the API call\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when the button is clicked\n\n      // Check if the transcript is not empty\n      if (!transcript.trim()) {\n        alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n        return;\n      } else {\n        await fetchApiResponse(transcript); // Call the API with transcript\n      }\n      resetTranscript(); // Reset the transcript after API call\n    }\n  };\n\n  // Function to make the API call\n  const fetchApiResponse = async input => {\n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything',\n      // API endpoint\n      {\n        input\n      },\n      // Send the input (voice or text) to the API\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiMessage = response.data.message; // Extract the response message from the API\n\n      // Update messages state with the new Q&A\n      setMessages(prevMessages => [...prevMessages, {\n        question: input,\n        // Save the input as the question\n        answer: aiMessage // Save the AI response as the answer\n      }]);\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages(prevMessages => [...prevMessages, {\n        question: input,\n        // Save the input even on error\n        answer: 'Error fetching response. Please try again.' // Display error message\n      }]);\n    }\n    setLoading(false); // End loading\n  };\n\n  // Function to handle text input submission\n  const handleTextSubmit = async e => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      await fetchApiResponse(inputText); // Call the API with the text input\n      setInputText(\"\"); // Reset the text input\n    } else {\n      alert(\"Please enter some text before submitting.\");\n    }\n  };\n\n  // Function to reset the responses\n  const handleResetResponses = () => {\n    setMessages([]); // Clear all Q&A pairs\n    resetTranscript(); // Reset the transcript\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Contain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat AI : Your Personal Voice & Text Assistance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"butn\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startbutn\",\n        onClick: handleStartListening,\n        disabled: listening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopbutn\",\n        onClick: handleStopListening,\n        disabled: !listening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutn\",\n        onClick: handleResetResponses,\n        children: \"Reset Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleTextSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"txtrequest\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          rows: \"4\",\n          cols: \"50\",\n          placeholder: \"Type your query here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"startbutn\",\n        children: \"Submit Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtrequest\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"Your transcribed text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtresponse\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages.map((msg, index) => `Question ${index + 1}: ${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join(''),\n        rows: \"10\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI responses will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 7\n  }, this);\n};\n_s(Aibody, \"vGzT2Fnn4yBP/ZuQA9tQmqJZzY8=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Aibody;\nexport default Aibody;\nvar _c;\n$RefreshReg$(_c, \"Aibody\");","map":{"version":3,"names":["React","useState","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Aibody","_s","messages","setMessages","loading","setLoading","inputText","setInputText","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListening","startListening","continuous","handleStopListening","stopListening","trim","alert","fetchApiResponse","input","response","post","headers","aiMessage","data","message","prevMessages","question","answer","error","console","handleTextSubmit","e","preventDefault","handleResetResponses","className","style","marginBottom","onClick","disabled","onSubmit","value","onChange","target","rows","cols","placeholder","type","readOnly","map","msg","index","join","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/Component/Aibody.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport './Aibody.css';\r\n\r\nconst Aibody = () => {\r\n    const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\r\n    const [loading, setLoading] = useState(false); // Loading state for API call\r\n    const [inputText, setInputText] = useState(\"\"); // State to handle text input\r\n    const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\r\n  \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n      return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\r\n    }\r\n  \r\n    // Function to start listening to speech\r\n    const handleStartListening = () => {\r\n      if (!listening) {\r\n        SpeechRecognition.startListening({ continuous: true }); // Start continuous listening\r\n      }\r\n    };\r\n  \r\n    // Function to stop listening to speech and use the transcript for the API call\r\n    const handleStopListening = async () => {\r\n      if (listening) {\r\n        SpeechRecognition.stopListening(); // Stop listening when the button is clicked\r\n  \r\n        // Check if the transcript is not empty\r\n        if (!transcript.trim()) {\r\n          alert(\"Please say something before sending.\"); // Alert if the transcript is empty\r\n          return;\r\n        } else {\r\n          await fetchApiResponse(transcript); // Call the API with transcript\r\n        }\r\n        resetTranscript(); // Reset the transcript after API call\r\n      }\r\n    };\r\n  \r\n    // Function to make the API call\r\n    const fetchApiResponse = async (input) => {\r\n      setLoading(true); // Start loading\r\n  \r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\r\n          { input }, // Send the input (voice or text) to the API\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n  \r\n        const aiMessage = response.data.message; // Extract the response message from the API\r\n  \r\n        // Update messages state with the new Q&A\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            question: input, // Save the input as the question\r\n            answer: aiMessage, // Save the AI response as the answer\r\n          },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching response from API:', error); // Handle error\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            question: input, // Save the input even on error\r\n            answer: 'Error fetching response. Please try again.', // Display error message\r\n          },\r\n        ]);\r\n      }\r\n  \r\n      setLoading(false); // End loading\r\n    };\r\n  \r\n    // Function to handle text input submission\r\n    const handleTextSubmit = async (e) => {\r\n      e.preventDefault();\r\n      if (inputText.trim()) {\r\n        await fetchApiResponse(inputText); // Call the API with the text input\r\n        setInputText(\"\"); // Reset the text input\r\n      } else {\r\n        alert(\"Please enter some text before submitting.\");\r\n      }\r\n    };\r\n  \r\n    // Function to reset the responses\r\n    const handleResetResponses = () => {\r\n      setMessages([]); // Clear all Q&A pairs\r\n      resetTranscript(); // Reset the transcript\r\n    };\r\n  \r\n    return (\r\n      <div className='Contain'>\r\n        <h1>Chat AI : Your Personal Voice & Text Assistance</h1>\r\n  \r\n        {/* Voice Control Buttons */}\r\n        <div className='butn' style={{ marginBottom: '20px' }}>\r\n          <button\r\n            className='startbutn'\r\n            onClick={handleStartListening}\r\n            disabled={listening}\r\n          >\r\n            Start Listening\r\n          </button>\r\n          <button\r\n            className='stopbutn'\r\n            onClick={handleStopListening}\r\n            disabled={!listening}\r\n          >\r\n            Stop Listening\r\n          </button>\r\n          <button\r\n            className='resetbutn'\r\n            onClick={handleResetResponses}\r\n          >\r\n            Reset Responses\r\n          </button>\r\n          {listening && <p>Listening... Please speak now.</p>}\r\n        </div>\r\n  \r\n        {/* Text Input Form */}\r\n        <form onSubmit={handleTextSubmit}>\r\n          <div className='txtrequest'>\r\n            <textarea\r\n              value={inputText}\r\n              onChange={(e) => setInputText(e.target.value)}\r\n              rows=\"4\"\r\n              cols=\"50\"\r\n              placeholder=\"Type your query here...\"\r\n            />\r\n          </div>\r\n          <button type='submit' className='startbutn'>\r\n            Submit Text\r\n          </button>\r\n        </form>\r\n  \r\n        {/* Display Transcript for Voice Input */}\r\n        <div className='txtrequest'>\r\n          <textarea\r\n            value={transcript}\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            readOnly\r\n            placeholder=\"Your transcribed text will appear here...\"\r\n          />\r\n        </div>\r\n  \r\n        {/* Loading and Response Display */}\r\n        {loading ? (\r\n          <p>Loading response...</p>\r\n        ) : (\r\n          <div className='txtresponse'>\r\n            <textarea\r\n              value={messages.map((msg, index) => `Question ${index + 1}: ${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join('')}\r\n              rows=\"10\"\r\n              cols=\"50\"\r\n              readOnly\r\n              placeholder=\"AI responses will appear here...\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Aibody;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}