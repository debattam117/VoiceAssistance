{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\Component\\\\Aibody.js\",\n  _s = $RefreshSig$();\nimport './Aibody.css';\nimport './Aibody.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Aibody = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // State to store chat messages\n  const [loading, setLoading] = useState(false); // State to show loading\n  const [inputText, setInputText] = useState(\"\"); // State to handle text input\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Voice recognition hooks\n\n  // Load chat history from localStorage on component mount\n  useEffect(() => {\n    const savedChatHistory = JSON.parse(localStorage.getItem('chatHistory'));\n    if (savedChatHistory) {\n      setMessages(savedChatHistory);\n    }\n  }, []);\n\n  // Save chat history to localStorage whenever it updates\n  useEffect(() => {\n    if (messages.length > 0) {\n      localStorage.setItem('chatHistory', JSON.stringify(messages));\n    }\n  }, [messages]);\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Handle start listening for voice input\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n    }\n  };\n\n  // Handle stop listening and process the voice input\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening();\n      const combinedInput = inputText || transcript; // Use either text input or transcript\n\n      if (!combinedInput.trim()) {\n        alert(\"Please say or type something before sending.\");\n        return;\n      } else {\n        await fetchApiResponse(combinedInput);\n      }\n      resetTranscript(); // Reset the transcript after stopping listening\n    }\n  };\n\n  // Make an API call with the input (text or voice)\n  const fetchApiResponse = async input => {\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything', {\n        input,\n        chatHistory: messages // Send previous chat history to the backend\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update the chat history with the new question and AI response\n      setMessages(response.data.chatHistory);\n    } catch (error) {\n      console.error('Error fetching response from API:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'user',\n        content: input\n      }, {\n        role: 'assistant',\n        content: 'Error fetching response. Please try again.'\n      }]);\n    }\n    setLoading(false);\n    setInputText(\"\"); // Clear text input after submission\n  };\n\n  // Handle text input submission\n  const handleTextSubmit = async e => {\n    e.preventDefault();\n    const combinedInput = inputText || transcript; // Use either text input or transcript\n\n    if (combinedInput.trim()) {\n      await fetchApiResponse(combinedInput);\n    } else {\n      alert(\"Please enter or say something before submitting.\");\n    }\n    resetTranscript(); // Clear the transcript after text submission\n  };\n\n  // Clear the chat and localStorage history\n  const handleResetResponses = () => {\n    setMessages([]);\n    resetTranscript();\n    setInputText(\"\");\n    localStorage.removeItem('chatHistory'); // Clear chat history from localStorage\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Contain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat AI: Your Personal Voice & Text Assistance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"butn\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startbutn\",\n        onClick: handleStartListening,\n        disabled: listening || inputText.trim().length > 0 // Disable when listening or typing\n        ,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopbutn\",\n        onClick: handleStopListening,\n        disabled: !listening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutn\",\n        onClick: handleResetResponses,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        children: \"Reset Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleTextSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"txtrequest\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputText || transcript // Show text input or transcript in the same box\n          ,\n          onChange: e => setInputText(e.target.value) // Update text input state\n          ,\n          rows: \"4\",\n          cols: \"50\",\n          placeholder: \"Type or speak your query here...\",\n          disabled: listening // Disable typing when listening\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"startbutn\",\n        disabled: !inputText.trim(),\n        children: \"Submit Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtresponse\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages.map((msg, index) => `Role: ${msg.role}\\nMessage: ${msg.content}\\n\\n`).join(''),\n        rows: \"20\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI responses will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(Aibody, \"aZ71Y3CyYoiJSjYViEesc4fCxno=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Aibody;\nexport default Aibody;\nvar _c;\n$RefreshReg$(_c, \"Aibody\");","map":{"version":3,"names":["React","useState","useEffect","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Aibody","_s","messages","setMessages","loading","setLoading","inputText","setInputText","transcript","listening","resetTranscript","savedChatHistory","JSON","parse","localStorage","getItem","length","setItem","stringify","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListening","startListening","continuous","handleStopListening","stopListening","combinedInput","trim","alert","fetchApiResponse","input","response","post","chatHistory","headers","data","error","console","prevMessages","role","content","handleTextSubmit","e","preventDefault","handleResetResponses","removeItem","className","style","marginBottom","onClick","disabled","padding","fontSize","onSubmit","value","onChange","target","rows","cols","placeholder","type","map","msg","index","join","readOnly","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/Component/Aibody.js"],"sourcesContent":["import './Aibody.css';\r\nimport './Aibody.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst Aibody = () => {\r\n    const [messages, setMessages] = useState([]); // State to store chat messages\r\n    const [loading, setLoading] = useState(false); // State to show loading\r\n    const [inputText, setInputText] = useState(\"\"); // State to handle text input\r\n    const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Voice recognition hooks\r\n\r\n    // Load chat history from localStorage on component mount\r\n    useEffect(() => {\r\n        const savedChatHistory = JSON.parse(localStorage.getItem('chatHistory'));\r\n        if (savedChatHistory) {\r\n            setMessages(savedChatHistory);\r\n        }\r\n    }, []);\r\n\r\n    // Save chat history to localStorage whenever it updates\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            localStorage.setItem('chatHistory', JSON.stringify(messages));\r\n        }\r\n    }, [messages]);\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\r\n    }\r\n\r\n    // Handle start listening for voice input\r\n    const handleStartListening = () => {\r\n        if (!listening) {\r\n            SpeechRecognition.startListening({ continuous: true });\r\n        }\r\n    };\r\n\r\n    // Handle stop listening and process the voice input\r\n    const handleStopListening = async () => {\r\n        if (listening) {\r\n            SpeechRecognition.stopListening();\r\n            const combinedInput = inputText || transcript; // Use either text input or transcript\r\n\r\n            if (!combinedInput.trim()) {\r\n                alert(\"Please say or type something before sending.\");\r\n                return;\r\n            } else {\r\n                await fetchApiResponse(combinedInput);\r\n            }\r\n\r\n            resetTranscript(); // Reset the transcript after stopping listening\r\n        }\r\n    };\r\n\r\n    // Make an API call with the input (text or voice)\r\n    const fetchApiResponse = async (input) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything', {\r\n                input,\r\n                chatHistory: messages // Send previous chat history to the backend\r\n            }, {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            // Update the chat history with the new question and AI response\r\n            setMessages(response.data.chatHistory);\r\n        } catch (error) {\r\n            console.error('Error fetching response from API:', error);\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                { role: 'user', content: input },\r\n                { role: 'assistant', content: 'Error fetching response. Please try again.' }\r\n            ]);\r\n        }\r\n\r\n        setLoading(false);\r\n        setInputText(\"\"); // Clear text input after submission\r\n    };\r\n\r\n    // Handle text input submission\r\n    const handleTextSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const combinedInput = inputText || transcript; // Use either text input or transcript\r\n\r\n        if (combinedInput.trim()) {\r\n            await fetchApiResponse(combinedInput);\r\n        } else {\r\n            alert(\"Please enter or say something before submitting.\");\r\n        }\r\n\r\n        resetTranscript(); // Clear the transcript after text submission\r\n    };\r\n\r\n    // Clear the chat and localStorage history\r\n    const handleResetResponses = () => {\r\n        setMessages([]);\r\n        resetTranscript();\r\n        setInputText(\"\");\r\n        localStorage.removeItem('chatHistory'); // Clear chat history from localStorage\r\n    };\r\n\r\n    return (\r\n        <div className='Contain'>\r\n            <h1>Chat AI: Your Personal Voice & Text Assistance</h1>\r\n\r\n            {/* Buttons for listening and resetting */}\r\n            <div className='butn' style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    className='startbutn'\r\n                    onClick={handleStartListening}\r\n                    disabled={listening || inputText.trim().length > 0} // Disable when listening or typing\r\n                >\r\n                    Start Listening\r\n                </button>\r\n                <button\r\n                    className='stopbutn'\r\n                    onClick={handleStopListening}\r\n                    disabled={!listening}\r\n                >\r\n                    Stop Listening\r\n                </button>\r\n                <button\r\n                    className='resetbutn'\r\n                    onClick={handleResetResponses}\r\n                    style={{ padding: '10px', fontSize: '16px' }}\r\n                >\r\n                    Reset Responses\r\n                </button>\r\n                {listening && <p>Listening... Please speak now.</p>}\r\n            </div>\r\n\r\n            {/* Text Input Form */}\r\n            <form onSubmit={handleTextSubmit}>\r\n                <div className='txtrequest'>\r\n                    <textarea\r\n                        value={inputText || transcript} // Show text input or transcript in the same box\r\n                        onChange={(e) => setInputText(e.target.value)} // Update text input state\r\n                        rows=\"4\"\r\n                        cols=\"50\"\r\n                        placeholder=\"Type or speak your query here...\"\r\n                        disabled={listening} // Disable typing when listening\r\n                    />\r\n                </div>\r\n                <button type='submit' className='startbutn' disabled={!inputText.trim()}>\r\n                    Submit Text\r\n                </button>\r\n            </form>\r\n\r\n            {/* Display responses or loading state */}\r\n            {loading ? <p>Loading response...</p> : (\r\n                <div className='txtresponse'>\r\n                    <textarea\r\n                        value={messages.map((msg, index) => `Role: ${msg.role}\\nMessage: ${msg.content}\\n\\n`).join('')}\r\n                        rows=\"20\"\r\n                        cols=\"50\"\r\n                        readOnly\r\n                        placeholder=\"AI responses will appear here...\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Aibody;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}