{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]); // To store messages\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const [error, setError] = useState(''); // Error state for displaying errors\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n  const handleMicClick = () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n      handleSendMessage(transcript); // Send the message to OpenAI API\n      resetTranscript(); // Reset transcript after sending\n    } else {\n      SpeechRecognition.startListening(); // Start listening when button is clicked\n    }\n  };\n  const handleSendMessage = async message => {\n    if (!message.trim()) {\n      setError('No message to send. Please speak into the microphone.');\n      return;\n    }\n    setLoading(true); // Start loading\n    setError(''); // Clear previous error\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: message\n        }]\n      }, {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          // Securely use the API key from environment variables\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiMessage = response.data.choices[0].message.content; // Get the AI response\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'user',\n        content: message\n      }, {\n        role: 'assistant',\n        content: aiMessage\n      }]); // Update messages state\n    } catch (error) {\n      console.error('Error fetching response from OpenAI:', error); // Log error to console\n      setError('Error fetching response from OpenAI. Please try again later.'); // Set error message for the user\n    }\n    setLoading(false); // End loading\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with OpenAI using Voice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMicClick,\n        children: listening ? 'Stop Listening' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '10px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === 'user' ? 'User' : 'AI', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZpnFfV8wbva3SJlfq0oZ520+jgU=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","error","setError","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleMicClick","stopListening","handleSendMessage","startListening","message","trim","response","post","model","role","content","headers","Authorization","process","env","REACT_APP_OPENAI_API_KEY","aiMessage","data","choices","prevMessages","console","style","padding","marginBottom","onClick","color","marginTop","map","msg","index","margin","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nfunction App() {\n  const [messages, setMessages] = useState([]); // To store messages\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const [error, setError] = useState(''); // Error state for displaying errors\n  const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n  }\n\n  const handleMicClick = () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n      handleSendMessage(transcript); // Send the message to OpenAI API\n      resetTranscript(); // Reset transcript after sending\n    } else {\n      SpeechRecognition.startListening(); // Start listening when button is clicked\n    }\n  };\n\n  const handleSendMessage = async (message) => {\n    if (!message.trim()) {\n      setError('No message to send. Please speak into the microphone.');\n      return;\n    }\n\n    setLoading(true); // Start loading\n    setError(''); // Clear previous error\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [{ role: 'user', content: message }],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`, // Securely use the API key from environment variables\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const aiMessage = response.data.choices[0].message.content; // Get the AI response\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: 'user', content: message },\n        { role: 'assistant', content: aiMessage },\n      ]); // Update messages state\n    } catch (error) {\n      console.error('Error fetching response from OpenAI:', error); // Log error to console\n      setError('Error fetching response from OpenAI. Please try again later.'); // Set error message for the user\n    }\n\n    setLoading(false); // End loading\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Chat with OpenAI using Voice</h1>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={handleMicClick}>\n          {listening ? 'Stop Listening' : 'Start Listening'}\n        </button>\n        {listening && <p>Listening...</p>}\n      </div>\n      {loading && <p>Loading response...</p>}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      <div style={{ marginTop: '20px' }}>\n        {messages.map((msg, index) => (\n          <div key={index} style={{ margin: '10px 0' }}>\n            <strong>{msg.role === 'user' ? 'User' : 'AI'}:</strong> {msg.content}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}