{"ast":null,"code":"import'./Aibody.css';import React,{useState,useEffect}from'react';import axios from'axios';import SpeechRecognition,{useSpeechRecognition}from'react-speech-recognition';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Aibody=()=>{const[messages,setMessages]=useState([]);// State to store chat messages\nconst[loading,setLoading]=useState(false);// State to show loading\nconst[inputText,setInputText]=useState(\"\");// State to handle text input\nconst{transcript,listening,resetTranscript}=useSpeechRecognition();// Voice recognition hooks\n// Load chat history from localStorage on component mount\nuseEffect(()=>{const savedChatHistory=JSON.parse(localStorage.getItem('chatHistory'));if(savedChatHistory){setMessages(savedChatHistory);}},[]);// Save chat history to localStorage whenever it updates\nuseEffect(()=>{if(messages.length>0){localStorage.setItem('chatHistory',JSON.stringify(messages));}},[messages]);if(!SpeechRecognition.browserSupportsSpeechRecognition()){return/*#__PURE__*/_jsx(\"div\",{children:\"Your browser does not support speech recognition. Please use a modern browser.\"});}// Handle start listening for voice input\nconst handleStartListening=()=>{if(!listening){SpeechRecognition.startListening({continuous:true});}};// Handle stop listening and process the voice input\nconst handleStopListening=async()=>{if(listening){SpeechRecognition.stopListening();const combinedInput=inputText||transcript;// Use either text input or transcript\nif(!combinedInput.trim()){alert(\"Please say or type something before sending.\");return;}else{await fetchApiResponse(combinedInput);}resetTranscript();// Reset the transcript after stopping listening\n}};// Make an API call with the input (text or voice)\nconst fetchApiResponse=async input=>{setLoading(true);try{const response=await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/search/QueryAnything`,{input,chatHistory:messages// Send previous chat history to the backend\n},{headers:{'Content-Type':'application/json'}});// Check if the response contains success and chatHistory\nif(response.data.success&&Array.isArray(response.data.chatHistory)){setMessages(response.data.chatHistory);}else{console.error('Unexpected response structure:',response.data);alert(\"Unexpected response format. Please try again.\");}}catch(error){console.error('Error fetching response from API:',error);alert(\"Failed to fetch response. Please check your network connection.\");setMessages(prevMessages=>[...prevMessages,{role:'user',content:input},{role:'assistant',content:'Error fetching response. Please try again.'}]);}setLoading(false);setInputText(\"\");// Clear text input after submission\n};// Handle text input submission\nconst handleTextSubmit=async e=>{e.preventDefault();const combinedInput=inputText||transcript;// Use either text input or transcript\nif(combinedInput.trim()){await fetchApiResponse(combinedInput);}else{alert(\"Please enter or say something before submitting.\");}resetTranscript();// Clear the transcript after text submission\n};// Clear the chat and localStorage history\nconst handleResetResponses=()=>{setMessages([]);resetTranscript();setInputText(\"\");localStorage.removeItem('chatHistory');// Clear chat history from localStorage\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"Contain\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Chat AI: Your Personal Voice & Text Assistance\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"butn\",style:{marginBottom:'20px'},children:[/*#__PURE__*/_jsx(\"button\",{className:\"startbutn\",onClick:handleStartListening,disabled:listening||inputText.trim().length>0// Disable when listening or typing\n,children:\"Start Listening\"}),/*#__PURE__*/_jsx(\"button\",{className:\"stopbutn\",onClick:handleStopListening,disabled:!listening,children:\"Stop Listening\"}),/*#__PURE__*/_jsx(\"button\",{className:\"resetbutn\",onClick:handleResetResponses,style:{padding:'10px',fontSize:'16px'},children:\"Reset Responses\"}),listening&&/*#__PURE__*/_jsx(\"p\",{children:\"Listening... Please speak now.\"})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleTextSubmit,children:[/*#__PURE__*/_jsx(\"div\",{className:\"txtrequest\",children:/*#__PURE__*/_jsx(\"textarea\",{value:inputText||transcript// Show text input or transcript in the same box\n,onChange:e=>setInputText(e.target.value)// Update text input state\n,rows:\"4\",cols:\"50\",placeholder:\"Type or speak your query here...\",disabled:listening// Disable typing when listening\n})}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"startbutn\",disabled:!inputText.trim(),children:\"Submit Text\"})]}),loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading response...\"}):/*#__PURE__*/_jsx(\"div\",{className:\"txtresponse\",children:/*#__PURE__*/_jsx(\"textarea\",{value:messages.map(msg=>`Role: ${msg.role}:\\nMessage: ${msg.content}\\n\\n`).join('')||'',rows:\"10\",cols:\"50\",readOnly:true,placeholder:\"AI responses will appear here...\"})})]});};export default Aibody;","map":{"version":3,"names":["React","useState","useEffect","axios","SpeechRecognition","useSpeechRecognition","jsx","_jsx","jsxs","_jsxs","Aibody","messages","setMessages","loading","setLoading","inputText","setInputText","transcript","listening","resetTranscript","savedChatHistory","JSON","parse","localStorage","getItem","length","setItem","stringify","browserSupportsSpeechRecognition","children","handleStartListening","startListening","continuous","handleStopListening","stopListening","combinedInput","trim","alert","fetchApiResponse","input","response","post","process","env","REACT_APP_API_URL","chatHistory","headers","data","success","Array","isArray","console","error","prevMessages","role","content","handleTextSubmit","e","preventDefault","handleResetResponses","removeItem","className","style","marginBottom","onClick","disabled","padding","fontSize","onSubmit","value","onChange","target","rows","cols","placeholder","type","map","msg","join","readOnly"],"sources":["D:/VoiceAssistance/FrontEnd/src/Component/Aibody.js"],"sourcesContent":["import './Aibody.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst Aibody = () => {\r\n    const [messages, setMessages] = useState([]); // State to store chat messages\r\n    const [loading, setLoading] = useState(false); // State to show loading\r\n    const [inputText, setInputText] = useState(\"\"); // State to handle text input\r\n    const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Voice recognition hooks\r\n\r\n    // Load chat history from localStorage on component mount\r\n    useEffect(() => {\r\n        const savedChatHistory = JSON.parse(localStorage.getItem('chatHistory'));\r\n        if (savedChatHistory) {\r\n            setMessages(savedChatHistory);\r\n        }\r\n    }, []);\r\n\r\n    // Save chat history to localStorage whenever it updates\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            localStorage.setItem('chatHistory', JSON.stringify(messages));\r\n        }\r\n    }, [messages]);\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\r\n    }\r\n\r\n    // Handle start listening for voice input\r\n    const handleStartListening = () => {\r\n        if (!listening) {\r\n            SpeechRecognition.startListening({ continuous: true });\r\n        }\r\n    };\r\n\r\n    // Handle stop listening and process the voice input\r\n    const handleStopListening = async () => {\r\n        if (listening) {\r\n            SpeechRecognition.stopListening();\r\n            const combinedInput = inputText || transcript; // Use either text input or transcript\r\n\r\n            if (!combinedInput.trim()) {\r\n                alert(\"Please say or type something before sending.\");\r\n                return;\r\n            } else {\r\n                await fetchApiResponse(combinedInput);\r\n            }\r\n\r\n            resetTranscript(); // Reset the transcript after stopping listening\r\n        }\r\n    };\r\n\r\n    // Make an API call with the input (text or voice)\r\n    const fetchApiResponse = async (input) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/search/QueryAnything`, {\r\n                input,\r\n                chatHistory: messages // Send previous chat history to the backend\r\n            }, {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            // Check if the response contains success and chatHistory\r\n            if (response.data.success && Array.isArray(response.data.chatHistory)) {\r\n                setMessages(response.data.chatHistory);\r\n            } else {\r\n                console.error('Unexpected response structure:', response.data);\r\n                alert(\"Unexpected response format. Please try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching response from API:', error);\r\n            alert(\"Failed to fetch response. Please check your network connection.\");\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                { role: 'user', content: input },\r\n                { role: 'assistant', content: 'Error fetching response. Please try again.' }\r\n            ]);\r\n        }\r\n\r\n        setLoading(false);\r\n        setInputText(\"\"); // Clear text input after submission\r\n    };\r\n\r\n    // Handle text input submission\r\n    const handleTextSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const combinedInput = inputText || transcript; // Use either text input or transcript\r\n\r\n        if (combinedInput.trim()) {\r\n            await fetchApiResponse(combinedInput);\r\n        } else {\r\n            alert(\"Please enter or say something before submitting.\");\r\n        }\r\n\r\n        resetTranscript(); // Clear the transcript after text submission\r\n    };\r\n\r\n    // Clear the chat and localStorage history\r\n    const handleResetResponses = () => {\r\n        setMessages([]);\r\n        resetTranscript();\r\n        setInputText(\"\");\r\n        localStorage.removeItem('chatHistory'); // Clear chat history from localStorage\r\n    };\r\n\r\n    return (\r\n        <div className='Contain'>\r\n            <h1>Chat AI: Your Personal Voice & Text Assistance</h1>\r\n\r\n            {/* Buttons for listening and resetting */}\r\n            <div className='butn' style={{ marginBottom: '20px' }}>\r\n                <button\r\n                    className='startbutn'\r\n                    onClick={handleStartListening}\r\n                    disabled={listening || inputText.trim().length > 0} // Disable when listening or typing\r\n                >\r\n                    Start Listening\r\n                </button>\r\n                <button\r\n                    className='stopbutn'\r\n                    onClick={handleStopListening}\r\n                    disabled={!listening}\r\n                >\r\n                    Stop Listening\r\n                </button>\r\n                <button\r\n                    className='resetbutn'\r\n                    onClick={handleResetResponses}\r\n                    style={{ padding: '10px', fontSize: '16px' }}\r\n                >\r\n                    Reset Responses\r\n                </button>\r\n                {listening && <p>Listening... Please speak now.</p>}\r\n            </div>\r\n\r\n            {/* Text Input Form */}\r\n            <form onSubmit={handleTextSubmit}>\r\n                <div className='txtrequest'>\r\n                    <textarea\r\n                        value={inputText || transcript} // Show text input or transcript in the same box\r\n                        onChange={(e) => setInputText(e.target.value)} // Update text input state\r\n                        rows=\"4\"\r\n                        cols=\"50\"\r\n                        placeholder=\"Type or speak your query here...\"\r\n                        disabled={listening} // Disable typing when listening\r\n                    />\r\n                </div>\r\n                <button type='submit' className='startbutn' disabled={!inputText.trim()}>\r\n                    Submit Text\r\n                </button>\r\n            </form>\r\n\r\n            {/* Display responses or loading state */}\r\n            {loading ? <p>Loading response...</p> : (\r\n                <div className='txtresponse'>\r\n                    <textarea\r\n                        value={messages.map((msg) => `Role: ${msg.role}:\\nMessage: ${msg.content}\\n\\n`).join('') || ''}\r\n                        rows=\"10\"\r\n                        cols=\"50\"\r\n                        readOnly\r\n                        placeholder=\"AI responses will appear here...\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Aibody;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}