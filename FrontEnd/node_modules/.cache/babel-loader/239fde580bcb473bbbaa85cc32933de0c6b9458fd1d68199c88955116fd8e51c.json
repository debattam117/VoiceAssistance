{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\Component\\\\Aibody.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport './Aibody.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Aibody = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Function to start listening to speech\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({\n        continuous: true\n      }); // Start continuous listening\n    }\n  };\n\n  // Function to stop listening to speech and call the API\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when the button is clicked\n\n      if (!transcript.trim()) {\n        alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n        return;\n      } else if (transcript.trim()) {\n        await fetchApiResponse(); // Call the API after stopping\n      }\n      resetTranscript(); // Reset the transcript after API call\n    }\n  };\n\n  // Function to make the API call\n  const fetchApiResponse = async () => {\n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything',\n      // API endpoint\n      {\n        input: transcript // Send the transcribed message as input\n      }, {\n        headers: {\n          'Content-Type': 'application/json' // Set headers\n        }\n      });\n\n      // Extract the response message from the API\n      const aiMessage = response.data.message;\n\n      // Update messages state with the new Q&A\n      setMessages(prevMessages => [...prevMessages, {\n        question: transcript,\n        // Save the transcript as the question\n        answer: aiMessage // Save the AI response as the answer\n      }]);\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages(prevMessages => [...prevMessages, {\n        question: transcript,\n        // Save the transcript even on error\n        answer: 'Error fetching response. Please try again.' // Display error message\n      }]);\n    }\n    setLoading(false); // End loading\n  };\n\n  // Function to reset the response text area\n  const handleResetResponses = () => {\n    setMessages([]); // Clear all Q&A pairs\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Contain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat AI : Your Personal Voice Assistance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"butn\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startbutn\",\n        onClick: handleStartListening,\n        disabled: listening // Disable if already listening\n        ,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopbutn\",\n        onClick: handleStopListening,\n        disabled: !listening // Disable if not listening\n        ,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutn\",\n        onClick: handleResetResponses,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        children: \"Reset Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtrequest\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"Your transcribed text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtresponse\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages.map((msg, index) => `Question ${index + 1}:${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join(''),\n        rows: \"10\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI responses will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n};\n_s(Aibody, \"udy9EN2ukZmp7qst/2UsSUcOpbk=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Aibody;\nexport default Aibody;\nvar _c;\n$RefreshReg$(_c, \"Aibody\");","map":{"version":3,"names":["React","useState","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Aibody","_s","messages","setMessages","loading","setLoading","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListening","startListening","continuous","handleStopListening","stopListening","trim","alert","fetchApiResponse","response","post","input","headers","aiMessage","data","message","prevMessages","question","answer","error","console","handleResetResponses","className","style","marginBottom","onClick","disabled","padding","fontSize","value","rows","cols","readOnly","placeholder","map","msg","index","join","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/Component/Aibody.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport './Aibody.css';\r\n\r\nconst Aibody = () => {\r\n    const [messages, setMessages] = useState([]); // State to store the list of Q&A pairs\r\n    const [loading, setLoading] = useState(false); // Loading state for API call\r\n    const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\r\n  \r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n      return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\r\n    }\r\n  \r\n    // Function to start listening to speech\r\n    const handleStartListening = () => {\r\n      if (!listening) {\r\n        SpeechRecognition.startListening({ continuous: true }); // Start continuous listening\r\n      }\r\n    };\r\n  \r\n    // Function to stop listening to speech and call the API\r\n    const handleStopListening = async () => {\r\n      if (listening) {\r\n        SpeechRecognition.stopListening(); // Stop listening when the button is clicked\r\n  \r\n        \r\n        if (!transcript.trim()) {\r\n          alert(\"Please say something before sending.\"); // Alert if the transcript is empty\r\n          return;\r\n        }\r\n        else if (transcript.trim()) {\r\n          await fetchApiResponse(); // Call the API after stopping\r\n        }\r\n  \r\n        resetTranscript(); // Reset the transcript after API call\r\n      }\r\n    };\r\n  \r\n    // Function to make the API call\r\n    const fetchApiResponse = async () => {\r\n  \r\n      \r\n      \r\n      setLoading(true); // Start loading\r\n  \r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\r\n          {\r\n            input: transcript, // Send the transcribed message as input\r\n          },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json', // Set headers\r\n            },\r\n          }\r\n        );\r\n  \r\n        // Extract the response message from the API\r\n        const aiMessage = response.data.message;\r\n  \r\n        // Update messages state with the new Q&A\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            question: transcript, // Save the transcript as the question\r\n            answer: aiMessage,    // Save the AI response as the answer\r\n          },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching response from API:', error); // Handle error\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            question: transcript, // Save the transcript even on error\r\n            answer: 'Error fetching response. Please try again.', // Display error message\r\n          },\r\n        ]);\r\n      }\r\n  \r\n      setLoading(false); // End loading\r\n    };\r\n  \r\n    // Function to reset the response text area\r\n    const handleResetResponses = () => {\r\n      setMessages([]); // Clear all Q&A pairs\r\n    };\r\n  \r\n    return (\r\n      <div className='Contain'>\r\n        <h1>Chat AI : Your Personal Voice Assistance</h1>\r\n        <div className='butn' style={{ marginBottom: '20px' }}>\r\n          <button className='startbutn'\r\n            onClick={handleStartListening}\r\n            disabled={listening} // Disable if already listening\r\n          >\r\n            Start Listening\r\n          </button>\r\n          <button className='stopbutn'\r\n            onClick={handleStopListening}\r\n            disabled={!listening} // Disable if not listening\r\n          >\r\n            Stop Listening\r\n          </button>\r\n          <button className='resetbutn'\r\n            onClick={handleResetResponses}\r\n            style={{ padding: '10px', fontSize: '16px' }}\r\n          >\r\n            Reset Responses\r\n          </button>\r\n          {listening && <p>Listening... Please speak now.</p>}\r\n        </div>\r\n        <div className='txtrequest' >\r\n          <textarea\r\n            value={transcript}\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            readOnly\r\n            placeholder=\"Your transcribed text will appear here...\"\r\n            \r\n          />\r\n        </div>\r\n        {loading ? <p>Loading response...</p> : (\r\n          <div className='txtresponse' >\r\n            <textarea\r\n              value={messages.map((msg, index) => `Question ${index + 1}:${msg.question}\\nAnswer:\\n${msg.answer}\\n\\n`).join('')}\r\n              rows=\"10\"\r\n              cols=\"50\"\r\n              readOnly\r\n              placeholder=\"AI responses will appear here...\"\r\n              \r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport default Aibody\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}