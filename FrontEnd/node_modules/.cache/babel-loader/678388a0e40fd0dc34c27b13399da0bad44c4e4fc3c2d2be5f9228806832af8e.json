{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState(''); // State to store the API response\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Handle microphone click event to start/stop listening\n  const handleMicClick = () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n    } else {\n      SpeechRecognition.startListening(); // Start listening when button is clicked\n    }\n  };\n\n  // Function to send the transcribed message to the API\n  const handleSendMessage = async () => {\n    if (!transcript.trim()) {\n      alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n      return;\n    }\n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything',\n      // API endpoint\n      {\n        input: transcript // Send the transcribed message as input\n      }, {\n        headers: {\n          'Content-Type': 'application/json' // Set headers\n        }\n      });\n\n      // Extract the response message from the API\n      const aiMessage = response.data.message;\n      setMessages(aiMessage); // Update messages state with API response\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages('Error fetching response. Please try again.'); // Display error message\n    }\n    setLoading(false); // End loading\n    resetTranscript(); // Reset transcript after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      maxWidth: '600px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with AI using Voice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMicClick,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        children: listening ? 'Stop Listening' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"Your transcribed text will appear here...\",\n        style: {\n          width: '100%',\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        disabled: loading || !transcript.trim() // Disable button if loading or no transcript\n        ,\n        children: loading ? 'Sending...' : 'Send Message'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI response will appear here...\",\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XJjvSMf2BBkTN8/cul5TMRHjVcQ=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n// function App() {\n//   const [messages, setMessages] = useState(''); // State to store the API response\n//   const [loading, setLoading] = useState(false); // Loading state for API call\n//   const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n//     return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n//   }\n\n//   // Handle microphone click event\n//   const handleMicClick = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n//       handleSendMessage(transcript); // Send the message to OpenAI API\n//       resetTranscript(); // Reset transcript after sending\n//     } else {\n//       SpeechRecognition.startListening(); // Start listening when button is clicked\n//     }\n//   };\n\n//   // Function to send the transcribed message to the API\n//   const handleSendMessage = async (message) => {\n//     if (!message.trim()) {\n//       alert(\"Please say something before sending.\"); // Alert if the message is empty\n//       return;\n//     }\n\n//     setLoading(true); // Start loading\n\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n//         {\n//           input: message, // Send the transcribed message as input\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json', // Set headers\n//           },\n//         }\n//       );\n\n//       // Extract the response message from the API\n//       const aiMessage = response.data.message;\n//       setMessages(aiMessage); // Update messages state with API response\n//     } catch (error) {\n//       console.error('Error fetching response from API:', error); // Handle error\n//       setMessages('Error fetching response. Please try again.'); // Display error message\n//     }\n\n//     setLoading(false); // End loading\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n//       <h1>Chat with AI using Voice</h1>\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={handleMicClick} style={{ padding: '10px', fontSize: '16px' }}>\n//           {listening ? 'Stop Listening' : 'Start Listening'}\n//         </button>\n//         {listening && <p>Listening... Please speak now.</p>}\n//       </div>\n//       {loading && <p>Loading response...</p>}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={transcript}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"Your transcribed text will appear here...\"\n//           style={{ width: '100%', marginBottom: '20px' }}\n//         />\n//         <textarea\n//           value={messages}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"AI response will appear here...\"\n//           style={{ width: '100%' }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","App","_s","messages","setMessages","loading","setLoading","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleMicClick","stopListening","startListening","handleSendMessage","trim","alert","response","post","input","headers","aiMessage","data","message","error","console","style","padding","maxWidth","margin","marginBottom","onClick","fontSize","value","rows","cols","readOnly","placeholder","width","disabled","marginTop","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nfunction App() {\n  const [messages, setMessages] = useState(''); // State to store the API response\n  const [loading, setLoading] = useState(false); // Loading state for API call\n  const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n  }\n\n  // Handle microphone click event to start/stop listening\n  const handleMicClick = () => {\n    if (listening) {\n      SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n    } else {\n      SpeechRecognition.startListening(); // Start listening when button is clicked\n    }\n  };\n\n  // Function to send the transcribed message to the API\n  const handleSendMessage = async () => {\n    if (!transcript.trim()) {\n      alert(\"Please say something before sending.\"); // Alert if the transcript is empty\n      return;\n    }\n\n    setLoading(true); // Start loading\n\n    try {\n      const response = await axios.post(\n        'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n        {\n          input: transcript, // Send the transcribed message as input\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json', // Set headers\n          },\n        }\n      );\n\n      // Extract the response message from the API\n      const aiMessage = response.data.message;\n      setMessages(aiMessage); // Update messages state with API response\n    } catch (error) {\n      console.error('Error fetching response from API:', error); // Handle error\n      setMessages('Error fetching response. Please try again.'); // Display error message\n    }\n\n    setLoading(false); // End loading\n    resetTranscript(); // Reset transcript after sending\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n      <h1>Chat with AI using Voice</h1>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={handleMicClick} style={{ padding: '10px', fontSize: '16px' }}>\n          {listening ? 'Stop Listening' : 'Start Listening'}\n        </button>\n        {listening && <p>Listening... Please speak now.</p>}\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <textarea\n          value={transcript}\n          rows=\"4\"\n          cols=\"50\"\n          readOnly\n          placeholder=\"Your transcribed text will appear here...\"\n          style={{ width: '100%', marginBottom: '10px' }}\n        />\n        <button\n          onClick={handleSendMessage}\n          style={{ padding: '10px', fontSize: '16px' }}\n          disabled={loading || !transcript.trim()} // Disable button if loading or no transcript\n        >\n          {loading ? 'Sending...' : 'Send Message'}\n        </button>\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        <textarea\n          value={messages}\n          rows=\"4\"\n          cols=\"50\"\n          readOnly\n          placeholder=\"AI response will appear here...\"\n          style={{ width: '100%' }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n// function App() {\n//   const [messages, setMessages] = useState(''); // State to store the API response\n//   const [loading, setLoading] = useState(false); // Loading state for API call\n//   const { transcript, listening, resetTranscript } = useSpeechRecognition(); // Speech recognition hooks\n\n//   if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n//     return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\n//   }\n\n//   // Handle microphone click event\n//   const handleMicClick = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening(); // Stop listening when button is clicked again\n//       handleSendMessage(transcript); // Send the message to OpenAI API\n//       resetTranscript(); // Reset transcript after sending\n//     } else {\n//       SpeechRecognition.startListening(); // Start listening when button is clicked\n//     }\n//   };\n\n//   // Function to send the transcribed message to the API\n//   const handleSendMessage = async (message) => {\n//     if (!message.trim()) {\n//       alert(\"Please say something before sending.\"); // Alert if the message is empty\n//       return;\n//     }\n\n//     setLoading(true); // Start loading\n\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:4000/api/v1/search/QueryAnything', // API endpoint\n//         {\n//           input: message, // Send the transcribed message as input\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json', // Set headers\n//           },\n//         }\n//       );\n\n//       // Extract the response message from the API\n//       const aiMessage = response.data.message;\n//       setMessages(aiMessage); // Update messages state with API response\n//     } catch (error) {\n//       console.error('Error fetching response from API:', error); // Handle error\n//       setMessages('Error fetching response. Please try again.'); // Display error message\n//     }\n\n//     setLoading(false); // End loading\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n//       <h1>Chat with AI using Voice</h1>\n//       <div style={{ marginBottom: '20px' }}>\n//         <button onClick={handleMicClick} style={{ padding: '10px', fontSize: '16px' }}>\n//           {listening ? 'Stop Listening' : 'Start Listening'}\n//         </button>\n//         {listening && <p>Listening... Please speak now.</p>}\n//       </div>\n//       {loading && <p>Loading response...</p>}\n//       <div style={{ marginTop: '20px' }}>\n//         <textarea\n//           value={transcript}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"Your transcribed text will appear here...\"\n//           style={{ width: '100%', marginBottom: '20px' }}\n//         />\n//         <textarea\n//           value={messages}\n//           rows=\"4\"\n//           cols=\"50\"\n//           readOnly\n//           placeholder=\"AI response will appear here...\"\n//           style={{ width: '100%' }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}