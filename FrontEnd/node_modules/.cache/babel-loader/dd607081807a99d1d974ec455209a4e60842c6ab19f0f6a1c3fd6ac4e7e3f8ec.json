{"ast":null,"code":"var _jsxFileName = \"D:\\\\OpenAIVoice\\\\openvoice\\\\src\\\\Component\\\\Aibody.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Aibody = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition();\n\n  // Load chat history from localStorage on component mount\n  useEffect(() => {\n    const savedChatHistory = JSON.parse(localStorage.getItem('chatHistory'));\n    if (savedChatHistory) {\n      setMessages(savedChatHistory);\n    }\n  }, []);\n\n  // Save chat history to localStorage whenever it updates\n  useEffect(() => {\n    if (messages.length > 0) {\n      localStorage.setItem('chatHistory', JSON.stringify(messages));\n    }\n  }, [messages]);\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser does not support speech recognition. Please use a modern browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  const handleStartListening = () => {\n    if (!listening) {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n    }\n  };\n  const handleStopListening = async () => {\n    if (listening) {\n      SpeechRecognition.stopListening();\n      if (!transcript.trim()) {\n        alert(\"Please say something before sending.\");\n        return;\n      } else {\n        await fetchApiResponse();\n      }\n      resetTranscript();\n    }\n  };\n  const fetchApiResponse = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything', {\n        input: transcript,\n        chatHistory: messages // Send previous chat history to the backend\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Update messages with the new Q&A\n      setMessages(response.data.chatHistory);\n    } catch (error) {\n      console.error('Error fetching response from API:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'user',\n        content: transcript\n      }, {\n        role: 'assistant',\n        content: 'Error fetching response. Please try again.'\n      }]);\n    }\n    setLoading(false);\n  };\n  const handleResetResponses = () => {\n    setMessages([]);\n    localStorage.removeItem('chatHistory'); // Clear chat history from localStorage\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Contain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat AI: Your Personal Voice Assistance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"butn\",\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startbutn\",\n        onClick: handleStartListening,\n        disabled: listening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopbutn\",\n        onClick: handleStopListening,\n        disabled: !listening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutn\",\n        onClick: handleResetResponses,\n        style: {\n          padding: '10px',\n          fontSize: '16px'\n        },\n        children: \"Reset Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), listening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening... Please speak now.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtrequest\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        rows: \"4\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"Your transcribed text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txtresponse\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messages.map((msg, index) => `Role: ${msg.role}\\nMessage: ${msg.content}\\n\\n`).join(''),\n        rows: \"10\",\n        cols: \"50\",\n        readOnly: true,\n        placeholder: \"AI responses will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Aibody, \"pPQvrDRtm98bwSS113IEvCJgwuw=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Aibody;\nexport default Aibody;\nvar _c;\n$RefreshReg$(_c, \"Aibody\");","map":{"version":3,"names":["React","useState","useEffect","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Aibody","_s","messages","setMessages","loading","setLoading","transcript","listening","resetTranscript","savedChatHistory","JSON","parse","localStorage","getItem","length","setItem","stringify","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListening","startListening","continuous","handleStopListening","stopListening","trim","alert","fetchApiResponse","response","post","input","chatHistory","headers","data","error","console","prevMessages","role","content","handleResetResponses","removeItem","className","style","marginBottom","onClick","disabled","padding","fontSize","value","rows","cols","readOnly","placeholder","map","msg","index","join","_c","$RefreshReg$"],"sources":["D:/OpenAIVoice/openvoice/src/Component/Aibody.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst Aibody = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const { transcript, listening, resetTranscript } = useSpeechRecognition();\r\n\r\n    // Load chat history from localStorage on component mount\r\n    useEffect(() => {\r\n        const savedChatHistory = JSON.parse(localStorage.getItem('chatHistory'));\r\n        if (savedChatHistory) {\r\n            setMessages(savedChatHistory);\r\n        }\r\n    }, []);\r\n\r\n    // Save chat history to localStorage whenever it updates\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            localStorage.setItem('chatHistory', JSON.stringify(messages));\r\n        }\r\n    }, [messages]);\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return <div>Your browser does not support speech recognition. Please use a modern browser.</div>;\r\n    }\r\n\r\n    const handleStartListening = () => {\r\n        if (!listening) {\r\n            SpeechRecognition.startListening({ continuous: true });\r\n        }\r\n    };\r\n\r\n    const handleStopListening = async () => {\r\n        if (listening) {\r\n            SpeechRecognition.stopListening();\r\n\r\n            if (!transcript.trim()) {\r\n                alert(\"Please say something before sending.\");\r\n                return;\r\n            } else {\r\n                await fetchApiResponse();\r\n            }\r\n\r\n            resetTranscript();\r\n        }\r\n    };\r\n\r\n    const fetchApiResponse = async () => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:4000/api/v1/search/QueryAnything', {\r\n                input: transcript,\r\n                chatHistory: messages // Send previous chat history to the backend\r\n            }, {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            // Update messages with the new Q&A\r\n            setMessages(response.data.chatHistory);\r\n        } catch (error) {\r\n            console.error('Error fetching response from API:', error);\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                { role: 'user', content: transcript },\r\n                { role: 'assistant', content: 'Error fetching response. Please try again.' }\r\n            ]);\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    const handleResetResponses = () => {\r\n        setMessages([]);\r\n        localStorage.removeItem('chatHistory'); // Clear chat history from localStorage\r\n    };\r\n\r\n    return (\r\n        <div className='Contain'>\r\n            <h1>Chat AI: Your Personal Voice Assistance</h1>\r\n            <div className='butn' style={{ marginBottom: '20px' }}>\r\n                <button className='startbutn' onClick={handleStartListening} disabled={listening}>\r\n                    Start Listening\r\n                </button>\r\n                <button className='stopbutn' onClick={handleStopListening} disabled={!listening}>\r\n                    Stop Listening\r\n                </button>\r\n                <button className='resetbutn' onClick={handleResetResponses} style={{ padding: '10px', fontSize: '16px' }}>\r\n                    Reset Responses\r\n                </button>\r\n                {listening && <p>Listening... Please speak now.</p>}\r\n            </div>\r\n            <div className='txtrequest'>\r\n                <textarea\r\n                    value={transcript}\r\n                    rows=\"4\"\r\n                    cols=\"50\"\r\n                    readOnly\r\n                    placeholder=\"Your transcribed text will appear here...\"\r\n                />\r\n            </div>\r\n            {loading ? <p>Loading response...</p> : (\r\n                <div className='txtresponse'>\r\n                    <textarea\r\n                        value={messages.map((msg, index) => `Role: ${msg.role}\\nMessage: ${msg.content}\\n\\n`).join('')}\r\n                        rows=\"10\"\r\n                        cols=\"50\"\r\n                        readOnly\r\n                        placeholder=\"AI responses will appear here...\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Aibody;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}